add to npm deploy package json script thingy: npm run lint && npm run test && npm run clean (i thinl)...

// const insertRow = (table, query) => (
//   database.getSql(query).then(() => (
//     database.getSql({
//       text: `SELECT last_insert_rowid() AS id FROM ${table} LIMIT 1`
//     })
//   )).then((row) => ({
//     table: table,
//     id: row[0].id
//   })).catch(error => ({ error }))
// );

const client = new ApolloClient({
  networkInterface: createNetworkInterface({
    uri: "http://localhost:3000/graphql",
    dataIdFromObject: (result) => {
      if (result.id && result.__typename) {
        return result.__typename + result.id;
      }
      return null;
    },
    initialState: window.__APOLLO_STATE__, // eslint-disable-line no-underscore-dangle
    ssrForceFetchDelay: 100,
    connectToDevTools: true
  }),
});

const dataIdFromObject = (result) => {
  if (result.id && result.__typename) {
    return result.__typename + result.id;
  }
  return null;
};

const client = new ApolloClient({
  networkInterface: createNetworkInterface(
    {
      uri: "http://localhost:3000/graphql",
      customResolvers: {
        Query: {
          ACTIVITY_QUERY: (_, args) => {
            console.log('customResolvers: args', args);
            return (
              toIdValue(dataIdFromObject({ __typename: 'activities', id: args['id'] }))
            );
          }
        }
      },
      initialState: window.__APOLLO_STATE__, // eslint-disable-line no-underscore-dangle
      ssrForceFetchDelay: 100,
      connectToDevTools: true,
      dataIdFromObject
    }
  ),
});


git config --global core.editor "nano"s


import ApolloClient, {
  createNetworkInterface,
  createBatchingNetworkInterface
} from 'apollo-client';


const batchingNetworkInterface = createBatchingNetworkInterface(
  {
    uri: 'http://localhost:3000/graphql',
    batchInterval: 10,
    dataIdFromObject: (result) => {
      if (result.id && result.__typename) {
        return result.__typename + result.id;
      }
      return null;
    },
    initialState: window.__APOLLO_STATE__, // eslint-disable-line no-underscore-dangle
    connectToDevTools: true,
    opts: {
    }
  }
);
const client = new ApolloClient({
  networkInterface: batchingNetworkInterface,
});



export const initialFetch = () => {
  const categoryListQuery = `{
      categoryList {
        categories {
          id
          description
          name
        }
      }
    }`;

  const activitiesQuery = (category_id) => {
    return `{
        categoryInterface(id: "categories: ${category_id}") {
          ... on Category {
            activities {
              id
              name
              about
              date
              location
              categoryId
            }
          }
        }
      }`;
  };

  function loadActivities(categoryList, activeIndex, activeCategory) {
    return fetch(activitiesQuery(activeCategory.id)).then((results) => {
      const { errors, data: { categoryInterface } } = results;
      if (errors) {
        return categoryList;
      }

      return {
        activeCategory: activeCategory.id,
        categories: [
          ...categoryList.categories.slice(0, activeIndex),
          Object.assign({}, activeCategory, categoryInterface),
          ...categoryList.categories.slice(activeIndex + 1, categoryList.categories.length)
        ]
      };
    });
  }

  return new Promise((resolve) => {
    fetch(categoryListQuery).then((results) => {
      const { errors, data: { categoryList } } = results;
      const index = 0;
      if (errors) {
        return errors;
      }
      const category = categoryList.categories[index];

      return loadActivities(categoryList.categories, index, category);
    }).then(resolve);
  });
};
